# -*- coding: utf-8 -*-
"""Неделя 3 (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/116Z5CSgiQtkjUpscN-AaYJlqSt5ePevG

# Неделя 3. Перепроецирование с использованием pyproj
## Системы координат. Немного теории

*К сожалению, Земля не плоская. А монитор плоский*

Почитать краткую теорию про системы координат вообще можно вот здесь https://disk.yandex.ru/i/vY__bZq5vumQoQ . Эта информация не понадобится для выполнения работы напрямую, но облегчит понимание того, что мы вообще делаем и зачем.

Большинство карт по умолчанию работают с wgs84 (EPSG:4326 https://epsg.io/4326), когда идет речь о координатах в градусах. Также часто используется EPSG:3857  https://epsg.io/3857, если необходимо описание координат в метрах.

Кадастр в РФ работает с координатами характерных точек в местных системах координат (МСК). Местная система координат - это плоская система, взятая как проекция Меркатора к эллипсоиду Красовского. Для того, чтобы минимизировать погрешности определения точек, РФ поделена на зоны картографической проекции, объекты в каждой из которой ставятся на учет в соответствующей этой зоне системе координат. Каждый регион разделен на 3-градусные зоны. Разделение проходит не по прямым, параллельным меридианам, а вдоль кадастрового деления. Что дает нам факт: каждый кадастровый квартал должен содержать внутри объекты в одной системе координат. Внутри квартала не может существовать двух рекомендуемых местных систем координат.

### Формат строки proj

Существует множество форматов, которые используются для описания референсных систем координат. Наиболее распространенными форматами являются: proj.4, EPSG, формат Well-known Text (WKT).

Для работы с pyproj нам необходимо использовать формат proj.4

Формат PROJ.4 strings – используют многие программные продукты для обработки пространственных данных, (например Raster, Rgdal, Qgis). Используя PROJ.4 синтаксис, указываетcя полный
набор параметров, включая эллипс, датум, единицы проекции и определение проекции, которые определяют конкретную референсную систему координат.
Каждый элемент обозначается знаком «+». После каждого «+» задается определяемый элемент.
Например +proj= и +datum=.
Строка proj4 собирается из отдельных компонентов (разделенные знаком «+»). Например:
- proj = utm: проекция UTM
- zone = 11: зона 11.
- datum = WGS84: начало отсчета относится к опорной точке 0,0 для системы координат,
используемой в проекции
- units = m: координаты указаны в МЕТРАХ.
- ellps = WGS84: эллипсоид для данных - WGS84

В результате получаем строку:
`+proj=utm +zone=11 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 `

Для описания других систем координат этих параметров недостаточно, и добавляются следующие:
- lat_0 = 0  начало координат осевого меридиана.
- lon_0 = 44,55 долгота осевого меридиана.
- k = 1 масштаб на осевом меридиане (для проекции Гаусса- Крюгера равен 1)
- x_0 = 1250000 ложное отклонение от меридиана к востоку в метрах (False easting)
- y_0 =-5614743,504 ложное отклонение от широты к северу в метрах (False northing)
  
То есть, для пересчета  мы можем использовать строки вида `+proj=tmerc +lat_0=0 +lon_0=44.55 +k=1 +x_0=1250000 +y_0=-5614743.504 +ellps=krass +units=m +no_defs`

Почитать подробнее про параметры (на английском) можно вот здесь - https://proj.org/en/9.3/usage/projections.html

Для системы координат EPSG:4326 строка параметров выглядит `+proj=longlat +datum=WGS84 +no_defs +type=crs`, а для EPSG:3857 выглядит `+proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs +type=crs`

## Знакомимся с библиотекой proj
### Установим библиотеки
Если вы выполняли все задания в одной и той же среде, то остальные нужные библиотеки у вас уже установлены.
Если какой-то из фрагментов кода не запускается и ругается на отсутствие библиотеки, скопируйте блок с её установкой из предыдущих работ и запустите.
"""

!pip install pyproj

"""### Пересчет. Простой случай
Если вы используете одно и то же преобразование, использование `pyproj.transformer.Transformer` может помочь оптимизировать ваши преобразования.
Системы координат можно описать используя коды EPSG
"""

import numpy
from pyproj import Transformer, transform

transformer = Transformer.from_crs(2263, 4326)
x_coords = numpy.random.randint(80000, 120000)
y_coords = numpy.random.randint(200000, 250000)
transformer.transform(x_coords, y_coords)

"""### Запуск преобразований. Описания параметров преобразования
Если хочется исследовать преобразования подробнее, можно почитать вот тут: https://pyproj4.github.io/pyproj/stable/advanced_examples.html

https://pyproj4.github.io/pyproj/stable/api/transformer.html

`pyproj.transformer.TransformerGroup` предоставляет как доступные, так и отсутствующие преобразования. Полезно, если вы хотите проверить, существует ли наилучшее возможное преобразование. А если нет, то как получить недостающую сетку.
Кроме кодов, вы также можете описать систему координат с помощью строки proj.
"""

from pyproj.transformer import TransformerGroup
tg = TransformerGroup("EPSG:4326", "+proj=aea +lat_0=50 +lon_0=-154 +lat_1=55 +lat_2=65 +x_0=0 +y_0=0 +datum=NAD27 +no_defs +type=crs +units=m", always_xy=True)
tg

from pyproj.transformer import TransformerGroup
tg = TransformerGroup("EPSG:4326", "+proj=aea +lat_0=50 +lon_0=-154 +lat_1=55 +lat_2=65 +x_0=0 +y_0=0 +datum=NAD27 +no_defs +type=crs +units=m", always_xy=True)
tg.transformers[0].description

from pyproj.transformer import TransformerGroup
tg = TransformerGroup("EPSG:4326", "+proj=aea +lat_0=50 +lon_0=-154 +lat_1=55 +lat_2=65 +x_0=0 +y_0=0 +datum=NAD27 +no_defs +type=crs +units=m", always_xy=True)
tg.unavailable_operations[0].name

from pyproj.transformer import TransformerGroup
tg = TransformerGroup("EPSG:4326", "+proj=aea +lat_0=50 +lon_0=-154 +lat_1=55 +lat_2=65 +x_0=0 +y_0=0 +datum=NAD27 +no_defs +type=crs +units=m", always_xy=True)
tg.unavailable_operations[0].grids[0].url

"""### Пересчет объекта целиком

Для запуска пересчета можно подать точки целым массивом или обратиться ко всем точкам геометрического объекта.

"""

from pyproj import Transformer
from shapely.geometry import LineString, Point, Polygon
transformer = Transformer.from_crs(4326, 2100)
points = [(22.95, 40.63), (22.81, 40.53), (23.51, 40.86)]
print("Пересчет из EPSG:4326 (градусная wgs84) в EPSG:2100: \n")
for pt in transformer.itransform(points):
  print(pt)
print("\n Пересчет из EPSG:4326 в некую МСК: \n")
transproj_eq = Transformer.from_crs(
    'EPSG:4326',
    '+proj=tmerc +lat_0=0 +lon_0=44.55 +k=1 +x_0=1250000 +y_0=-5614743.504 +ellps=krass +units=m +no_defs',
    always_xy=True,
)
for pt in transproj_eq.itransform(points):
    print(pt)
print("\n Пересчет из EPSG:4326 в некую МСК, с обращением к полигону: \n")
pol =     Polygon(
        LineString([
            Point(37.660516, 55.763809), Point(37.659749, 55.764129), Point(37.659266, 55.763821), Point(37.65962, 55.76329), Point(37.660156, 55.763392), Point(37.660516, 55.763809)
        ])
    )
for point in transproj_eq.itransform(pol.exterior.coords):
  print(point)

"""### Методы для вычисления периметра и площади
А еще эта библиотека позволяет встроенными методами считать площадь и периметр объектов, опираясь на выбранный эллипсоид.
"""

from pyproj import Geod
from shapely.geometry import LineString, Point, Polygon
from IPython.display import HTML, display
geod = Geod(ellps="WGS84")
pol =     Polygon(
        LineString([
            Point(37.660516, 55.763809), Point(37.659749, 55.764129), Point(37.659266, 55.763821), Point(37.65962, 55.76329), Point(37.660156, 55.763392), Point(37.660516, 55.763809)
        ]),
        holes=[LineString([Point(37.659878, 55.763917), Point(37.660221, 55.763803), Point(37.659802, 55.763507), Point(37.659878, 55.763917)])],
    )
poly_area, poly_perimeter = geod.geometry_area_perimeter(pol)
s = "Площадь полигона с дыркой: " + str(round(poly_area, 2)) + " кв. метров, периметр полигона: " + str(round(poly_perimeter, 2)) + " метров. "
print(s)
html_pol =pol._repr_svg_()
print(html_pol)
display(HTML(html_pol))

"""## Приступим!
В следующем фрагменте кода реализована генерация псевдослучайного полигона вокруг стартовой точки. И заложена основа для формирования отчета.
Последняя строка выводит картинку получившегося полигона ниже кода, и нужна только для отладки. На файл отчета она не влияет.
"""

from pyproj import Geod
from shapely.geometry import LineString, Point, Polygon
from pyproj import Transformer
from IPython.display import HTML, display
import random
import math
# задаем стартовую точку
startPoint = Point(31.268882, 58.523139)
# генерация полигона - начало
lst = []
j = 1
count_p = 10 + round(7*random.random())
center_x = startPoint.x
center_y = startPoint.y
while j < count_p:
    radius = 0.0021*(0.1+random.random())
    angle = j*2*math.pi/count_p
    lat = (center_x+radius*math.cos(angle))
    lon = (center_y+radius*math.sin(angle))
    lst.append([lat, lon])
    j = j+1
polygon = Polygon(lst)
# генерация полигона - конец
result_html='''<html>
    <body>
      <h1>Отчет за Отчет за 3 неделю ознакомительной практики по разработке программного обеспечения геосервиса</h1>
      <h2>Выполнила: Сивец Р.И. группа 2024-ФГиИБ-ИС-2см</h2>'''

   # здесь вставить формирование svg
html_pol = polygon._repr_svg_()

# записать полученное svg в конце result_html
result_html = result_html + html_pol

  # здесь вставить подсчет площади и подсчет периметра
poly_area, poly_perimeter = geod.geometry_area_perimeter(polygon)
s = "Площадь полигона: " + str(round(poly_area, 2)) + " кв. метров, периметр полигона: " + str(round(poly_perimeter, 2)) + " метров. "


# записать площадь и периметр в конце result_html
result_html = result_html + s

  # здесь вставить пересчет всех точек
transformer = Transformer.from_crs(4326, 3857)

  # записать сведения о системе координат и координаты пересчитанных точек в конце result_html
result_html = result_html + "<p>Точки полигона в системе координат EPSG:3857: </p>"
for pt in transformer.itransform(polygon.exterior.coords):
  result_html = result_html + f"{pt}<br>"
# записать сведения о системе координат и координаты пересчитанных точек в конце result_html
result_html = result_html + ('''
    </body>
</html>''')
file_html = open("result_3.html", "w")
file_html.write(result_html)
file_html.close()
display(HTML(polygon._repr_svg_()))

"""### Задание
1. Добавить титул с названием отчета, ФИО и группой
2. Изменить стартовую точку на ваше текущее местоположение. Добавить в отчет картинку полигона (svg)
3. Добавить в формируемый отчет подсчет площади и подсчет периметра генерируемого полигона
4. Добавить в отчет указание целевой системы координат и массив пересчитанных точек. По умолчанию пересчитываем из EPSG:4326 в EPSG:3857
5. Для выполнения пунктов 2-4 вносите изменения в предыдущий блок кода. Результат будет сохранен в файл `result_3.html`, его и приложить в СДО.
"""

