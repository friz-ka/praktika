# -*- coding: utf-8 -*-
"""Неделя_4_(2025).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oeNCSEs1WhU5HYV-qRMi-NKR60wFO-Zt

# Неделя 4. Пространственные запросы и пространтсвенные операции
Задание этой недели будет похоже на то, что мы делали на неделе 1 (мы тоже будем парсить датасеты с геоданными) и на то, что мы делали на неделе 2 (визуализация на карте пригодится также).

## Знакомство с датасетом регионов
Для начала посмотрим, что содержится в файле russian_regions.csv
"""

import pandas as pd

df = pd.read_csv('russian_regions.csv', sep=';', encoding='cp1251')
df.head()

"""Посмотрим, как обращаться со столбцом "Полигон". Для примера выведем на карту границы Московской области"""

import pandas as pd
import shapely
import ast
import folium

# Функция парсинга координат
#Преобразование координат в формат списка
def parse_coordinates(coord_str):
    try:
        return (ast.literal_eval(coord_str))[0]
    except:
        return None

df = pd.read_csv('russian_regions.csv', sep=';', encoding='cp1251')
df1 = df[df['Регион'] == "Новгородская область" ]

for idx, row in df1.iterrows():
    coords = parse_coordinates(row['Полигон'])
    # Создаем полигон с помощью библиотеки Shapely
    polygon = shapely.Polygon(coords)

if coords:
  # Получаем координаты центроида
  centroid = polygon.centroid.coords[0]

  # Координаты центроида
  lat_centroid, lon_centroid = centroid
  m = folium.Map(location=[lat_centroid, lon_centroid], zoom_start=8, tiles='Cartodb Positron',)
  folium.Polygon(
                locations=coords,
                tooltip=row['Регион'],
                color='fuchsia',
                weight=0.5,
                fill = True,
            ).add_to(m)
m

"""## Знакомство с другим датасетом"""

import pandas as pd


df3 = pd.read_csv('objects_v2.csv', sep=';', encoding='utf-8')

df3.head()

"""#Совместим данные из разных датасетов на одной карте
Что полезного есть в коде ниже:
- метод MarkerCluster из плагинов для карты folium. Позволяет красиво объединить точечные маркеры, для аккуратного просмотра карты. Почитать о нем можно [тут](https://newtechaudit.ru/vizualiziruj-prosto-interaktivnaya-karta-cherez-folium/ ) или [здесь](https://proglib.io/p/python-web-map)
- метод shapely.contains проверяет вхождение в полигон точки.

"""

from folium.plugins import MarkerCluster

marker_cluster = MarkerCluster().add_to(m)
#найти все точки, которые попадают в "наш" полигон и при этом в названии содержат слово "Завод"

for cur_row in df3.iterrows():
  cur_pos = shapely.Point([float(cur_row[1]["latitude"]), float(cur_row[1]["longitude"])])
  if shapely.contains(polygon, cur_pos) and "Молодежная" in cur_row[1]["address"]:
    folium.Marker(
        location = [float(cur_row[1]["latitude"]), float(cur_row[1]["longitude"])],
        popup=cur_row[1]["address"], tooltip=cur_row[1]["name"]
    ).add_to(marker_cluster)
  if shapely.contains(polygon, cur_pos) and "Вересова" in cur_row[1]["address"]:
    folium.Marker(
        location = [float(cur_row[1]["latitude"]), float(cur_row[1]["longitude"])],
        popup=cur_row[1]["address"], tooltip=cur_row[1]["name"]
    ).add_to(marker_cluster)
  if shapely.contains(polygon, cur_pos) and "Великая" in cur_row[1]["address"]:
    folium.Marker(
        location = [float(cur_row[1]["latitude"]), float(cur_row[1]["longitude"])],
        popup=cur_row[1]["address"], tooltip=cur_row[1]["name"]
    ).add_to(marker_cluster)
m

"""#Задание
1. По аналогии с прошлыми заданиями результат должен быть представлен в result.html. На этот раз заготовки нет и вам придется собрать ее самим. Не забывайте про название работы, ФИО и группу.
2. Из датасета russian_regions загрузите свой регион, его границы добавьте на карту, сделайте заливку полигона цветом на ваш выбор.
3. Выберите несколько (не менее трех) улиц, которые есть в вашем регионе. Из второго датасета отфильтруйте все объекты, чей адрес содержит одну из этих улиц. Добавьте эти объекты на карту.
4. Не забудьте про popup (с адресом), tooltip (с названием) и MarkerCluster (для визуального объединения кластеров).
5. В result должна быть, помимо заголовочных данных, ОДНА карта с перечисленным в предыдущих пунктах содержимым.
"""

import pandas as pd
import shapely
import ast
import folium
from folium.plugins import MarkerCluster

# загружаю свой регион
def parse_coordinates(coord_str):
    try:
        return (ast.literal_eval(coord_str))[0]
    except:
        return None

df = pd.read_csv('russian_regions.csv', sep=';', encoding='cp1251')
df1 = df[df['Регион'] == "Новгородская область" ]

for idx, row in df1.iterrows():
    coords = parse_coordinates(row['Полигон'])

    polygon = shapely.Polygon(coords)

if coords:

    centroid = polygon.centroid.coords[0]

    lat_centroid, lon_centroid = centroid
    m = folium.Map(location=[lat_centroid, lon_centroid], zoom_start=8, tiles='Cartodb Positron',)
    folium.Polygon(
                locations=coords,
                tooltip=row['Регион'],
                color='fuchsia',
                weight=0.5,
                fill = True,
            ).add_to(m)
m


#найти все точки, которые попадают в Новгородскую область и при этом в названии содержат слово "Молодежная, Вересова, Великая"

marker_cluster = MarkerCluster().add_to(m)

for cur_row in df3.iterrows():
  cur_pos = shapely.Point([float(cur_row[1]["latitude"]), float(cur_row[1]["longitude"])])
  if shapely.contains(polygon, cur_pos) and "Молодежная" in cur_row[1]["address"]:
    folium.Marker(
        location = [float(cur_row[1]["latitude"]), float(cur_row[1]["longitude"])],
        popup=cur_row[1]["address"], tooltip=cur_row[1]["name"]
    ).add_to(marker_cluster)
  if shapely.contains(polygon, cur_pos) and "Вересова" in cur_row[1]["address"]:
    folium.Marker(
        location = [float(cur_row[1]["latitude"]), float(cur_row[1]["longitude"])],
        popup=cur_row[1]["address"], tooltip=cur_row[1]["name"]
    ).add_to(marker_cluster)
  if shapely.contains(polygon, cur_pos) and "Великая" in cur_row[1]["address"]:
    folium.Marker(
        location = [float(cur_row[1]["latitude"]), float(cur_row[1]["longitude"])],
        popup=cur_row[1]["address"], tooltip=cur_row[1]["name"]
    ).add_to(marker_cluster)

m.save("map.html")

# выводим регион в result_html
file_html = open("result_4.html", "w")
page = ('''<html>
<body>
 <h1>Отчет за 4 неделю ознакомительной практики по разработке программного обеспечения геосервиса</h1>
 <h2>Выполнила: Сивец Р.И. группа 2024-ФГиИБ-ИС-2см</h2>''')
with open('map.html', 'r', encoding='utf-8') as f1:
    data1 = f1.readlines()
for str1 in data1:
    page = page + str1
page = page + ('''
</body>
</html>''')
file_html.write(page)
file_html.close()

m